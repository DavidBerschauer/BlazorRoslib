@using BlazorRoslib.Core.ROS;
@using BlazorRoslib.Core.ROS.Topics;
@using BlazorRoslib.Core.ROS.Services;
@using BlazorRoslib.Core.ROS.Rosapi;
@using BlazorRoslib.Core.Services;
@using BlazorRoslib.UI.Ros3D;


@inject RoslibInterop RosInterop
@inject Ros3DInterop Ros3d
@inject NavigationManager NavManager

<div style="overflow:hidden; position:relative;" class="mud-height-full">
    <MudExpansionPanels Class="m-2" Style="position: absolute; top:0px; left:0px">
        <MudExpansionPanel Text="Settings">
            <MudSelect @bind-Value="PointCloudTopic" Label="Pointcloud Topic" Variant="Variant.Outlined" Class="mb-2">
                @if (pcTopics != null)
                {
                    foreach (var t in pcTopics)
                    {
                        <MudSelectItem Value="@t.Name">@t.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect @bind-Value="ScanTopic" Label="Scan Topic" Variant="Variant.Outlined" Class="mb-2">
                @if (scanTopics != null)
                {
                    foreach (var t in scanTopics)
                    {
                        <MudSelectItem Value="@t.Name">@t.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudTextField @bind-Value="FixedFrame" Label="Fixed Frame" Variant="Variant.Outlined" Class="mb-2" />
        </MudExpansionPanel>
    </MudExpansionPanels>
    <div id="viewerDiv" class="d-flex justify-center mud-height-full" />
</div>

@code{
    private string _pointCloudTopic = "";
    private string PointCloudTopic
    {
        get => _pointCloudTopic;
        set
        {
            if (_pointCloudTopic?.Equals(value) ?? false) return;
            _pointCloudTopic = value;
            Task.Run(async () => await Ros3d.AddPointCloud(_pointCloudTopic));
        }
    }

    private string _scanTopic = "";
    private string ScanTopic
    {
        get => _scanTopic;
        set
        {
            if (_scanTopic?.Equals(value) ?? false) return;
            _scanTopic = value;
            Task.Run(async () => await Ros3d.AddLaserScan(_scanTopic));
        }
    }

    private string _fixedFrame = "";
    private string FixedFrame
    {
        get => _fixedFrame;
        set
        {
            if (_fixedFrame?.Equals(value) ?? false) return;
            _fixedFrame = value;
            Task.Run(async () => await Ros3d.UpdateFixedFrame(_fixedFrame));
        }
    }

    private IEnumerable<Topic>? pcTopics;
    private IEnumerable<Topic>? scanTopics;

    private async Task ReloadTopics()
    {
        await RosInterop.GetTopics((list) =>
        {
            pcTopics = list.Where((t) => t.MessageType.Equals("sensor_msgs/PointCloud2"));
            if (string.IsNullOrEmpty(PointCloudTopic))
                PointCloudTopic = pcTopics?.FirstOrDefault()?.Name ?? "";
            scanTopics = list.Where((t) => t.MessageType.Equals("sensor_msgs/LaserScan"));
            if (string.IsNullOrEmpty(ScanTopic))
                ScanTopic = scanTopics?.FirstOrDefault()?.Name ?? "";
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await Ros3d.InitViewer();
        await ReloadTopics();
    }
}

