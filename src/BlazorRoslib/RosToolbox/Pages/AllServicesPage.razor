@page "/allservices"
@using BlazorRoslib.Core.ROS;
@using BlazorRoslib.Core.ROS.Services;

@inject RoslibInterop RosInterop
@inject CustomNavManager NavManager

<PageTitle>Services</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-3 p-3">
    @if (services != null)
    {
        <MudTable Items="@services" Filter="new Func<IService, bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Verfügbare Services</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudIconButton Icon="@Icons.Material.Filled.Autorenew" Color="Color.Secondary" Edge="Edge.Start" OnClick="@((e) => UpdateServices())" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.PhoneForwarded" Color="Color.Secondary" Edge="Edge.Start" OnClick="@((e) => CallService(context))" />
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Color="Color.Secondary" Edge="Edge.Start" OnClick="@((e) => GoToService(context))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    }
    <div style="white-space: pre-wrap">
        @msg
    </div>
</MudContainer>

@code {
    private string searchString1 = "";

    private bool FilterFunc1(IService service) => FilterFunc(service, searchString1);

    private bool FilterFunc(IService service, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (service.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private string msg = "";

    private IEnumerable<IService>? services;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateServices();
        RosInterop.OnStateHasChanged += (_) => UpdateServices();
    }

    private void UpdateServices()
    {
        Task.Run(async () =>
        {
            services = null;
            InvokeAsync(StateHasChanged);
            await RosInterop.GetServices((list) =>
            {
                services = list;
                InvokeAsync(StateHasChanged);
            });
        });
    }

    private void CallService(IService service)
    {
        // new[] { "type" }, new[] {"std_msgs/Int32"}
        RosInterop.CallService(service, (result) =>
        {
            msg = result;
            InvokeAsync(StateHasChanged);
        });
    }

    private void GoToService(IService service)
    {
        NavManager.NavigateTo($"rosservice?ServiceName={service.Name}");
    }
}