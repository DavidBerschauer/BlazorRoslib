@page "/liveview"
@using BlazorRoslib.Core.ROS;
@using BlazorRoslib.Core.ROS.Topics;

@inject RoslibInterop RosInterop

<PageTitle>Live</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-3 p-3">
    <MudExpansionPanels Class="mb-2">
        <MudExpansionPanel Text="Settings">
            <MudTextField @bind-Value="ImgTopic" Label="Image Topic" Variant="Variant.Outlined" Class="mb-2" />
            <MudSelect @bind-Value="ImgTopic" Label="Image Topic" Variant="Variant.Outlined" Class="mb-2">
                @if (topics != null)
                {
                    foreach (var t in topics)
                    {
                        <MudSelectItem Value="@t.Name">@t.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <div class="d-flex justify-center">
        <MudImage Fluid="true" Src=@imageUrl ObjectFit="ObjectFit.ScaleDown" />
    </div>
    <h5>@msg</h5>
</MudContainer>

@code{
    private string? msg;

    private string? imageUrl;

    private string _imgTopic = "";
    private string ImgTopic
    {
        get => _imgTopic;
        set
        {
            if (_imgTopic?.Equals(value) ?? false) return;
            _imgTopic = value;
            UpdateImage();
        }
    }

    private IEnumerable<Topic>? topics;

    protected override void OnInitialized()
    {
        Task.Run(async () => await ReloadTopics());
        RosInterop.OnStateHasChanged += (_) => UpdateImage();
    }

    private void UpdateImage()
    {
        imageUrl = $"http://{RosInterop?.RosHost}:8080/stream?topic={ImgTopic}&type=mjpeg";
    }

    private async Task ReloadTopics()
    {
        await RosInterop.GetTopics((list) =>
        {
            topics = list.Where((t) => t.MessageType.Equals("sensor_msgs/Image"));
            if (ImgTopic == null)
                ImgTopic = topics?.FirstOrDefault()?.Name ?? "";
            InvokeAsync(StateHasChanged);
        });
    }
}