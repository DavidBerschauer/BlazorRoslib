@page "/rostopic"
@using BlazorRoslib.Core.ROS;
@using BlazorRoslib.Core.ROS.Topics;
@using LiveChartsCore
@using LiveChartsCore.SkiaSharpView
@using LiveChartsCore.SkiaSharpView.Blazor
@using System.Collections.Generic;
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using CommunityToolkit.Mvvm.ComponentModel;
@using LiveChartsCore.SkiaSharpView.Painting;
@using LiveChartsCore.SkiaSharpView.Painting.Effects;
@using SkiaSharp;

@inject RoslibInterop RosInterop

<PageTitle>@TopicName</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-3 p-3">
    <MudText Typo="Typo.h3" Color="Color.Secondary" Class="mb-3">@TopicName</MudText>
    <MudText Typo="Typo.h4" Color="Color.Secondary" Class="mb-3">@MsgType</MudText>
    @switch (topicType)
    {
        case TopicType.Numeric:
            <h4>@($"{currentValue}")</h4>
            <CartesianChart Series="Series"
                            ZoomMode="LiveChartsCore.Measure.ZoomAndPanMode.X"
                            XAxes="xAxes" YAxes="yAxes"
                            EasingFunction="null"
                            LegendPosition="@LegendPosition">
            </CartesianChart>
            break;
        case TopicType.String:
            <h4>String</h4>
            break;
    }
    <div style="white-space: pre-wrap">
        @msg
    </div>
</MudContainer>

@code{
    enum TopicType
    {
        Default,
        String,
        Numeric
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = "TopicName")]
    public string TopicName { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "MsgType")]
    public string MsgType { get; set; }

    private Axis[] xAxes { get; set; }
        = new Axis[]
        {
            new Axis
            {
                LabelsPaint = new SolidColorPaint(SKColors.Gray),
                TextSize = 20,
                SeparatorsPaint = new SolidColorPaint(SKColors.LightSlateGray) { StrokeThickness = 2 }
            }
            };

    private Axis[] yAxes { get; set; }
        = new Axis[]
        {
            new Axis
            {
                LabelsPaint = new SolidColorPaint(SKColors.Gray),
                TextSize = 20,
                SeparatorsPaint = new SolidColorPaint(SKColors.LightSlateGray) { StrokeThickness = 2 }
            }
            };

    public LiveChartsCore.Measure.LegendPosition LegendPosition { get; set; } = LiveChartsCore.Measure.LegendPosition.Hidden;

    private string msg = "Warten auf erste Nachricht...";

    private TopicType topicType { get; set; }

    private double currentValue = 0;

    public ObservableCollection<ISeries> Series { get; set; }

    public ObservableCollection<double> numericValues { get; set; }

    public RosTopicPage()
    {
        Series = new ObservableCollection<ISeries>();
        numericValues = new ObservableCollection<double>();
    }

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            switch (MsgType)
            {
                case "std_msgs/Int32":
                case "std_msgs/Int16":
                case "std_msgs/UInt16":
                case "std_msgs/UInt32":
                case "std_msgs/Float32":
                case "std_msgs/Float64":
                    topicType = TopicType.Numeric;
                    Series.Add(new LineSeries<double>
                    {
                        Values = numericValues,
                        Stroke = new SolidColorPaint(SKColors.LightBlue) { StrokeThickness = 2 },
                        Fill = null,
                        Name = "Data",
                        GeometryFill = null,
                        GeometryStroke = null
                    });
                    LegendPosition = LiveChartsCore.Measure.LegendPosition.Bottom;
                    await RosInterop.SubscribeTopic<StdMsgs<double>>(TopicName, MsgType, OnStdFloat);
                    break;
                case "std_msgs/String":
                    topicType = TopicType.String;
                    await RosInterop.SubscribeTopic<StdMsgs<string>>(TopicName, MsgType, OnStdString);
                    break;
                default:
                    topicType = TopicType.Default;
                    await RosInterop.SubscribeTopic(TopicName, MsgType, OnTopic);
                    break;
            }
            InvokeAsync(StateHasChanged);
        });
    }

    private void OnStdFloat(StdMsgs<double> msg)
    {
        currentValue = msg.data;
        this.msg = "";
        numericValues.Add(currentValue);
        InvokeAsync(StateHasChanged);
    }

    private void OnStdString(StdMsgs<string> msg)
    {
        this.msg = msg.data ?? "Unknown";
        InvokeAsync(StateHasChanged);
    }

    public void OnTopic(string name, string msgType, string data)
    {
        //TODO aus allgemeinen daten numerische Werte ziehen können und plotten
        msg = data;
        InvokeAsync(StateHasChanged);
    }
}