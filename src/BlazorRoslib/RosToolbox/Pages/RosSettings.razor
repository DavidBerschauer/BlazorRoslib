@page "/rossettings"
@using ROS;
@using RoslibBlazor.ROS;
@inject RoslibInterop RosInterop

<PageTitle>ROS-Einstellungen</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-6 p-4">
    <MudTextField @bind-Value="RosInterop.RosHost" Label="Host" Variant="Variant.Outlined" Class="mb-2" />
    <MudNumericField @bind-Value="RosInterop.RosPort" Label="Port" Min="0" Max="65535" Variant="Variant.Outlined" Class="mb-2" />
    <h5>@RosInterop.ErrorMsg</h5>
    <h5>@navSatMsg</h5>
    <h5>@msg</h5>
    <h5>@otherMsg</h5>
</MudContainer>

@code{
    private string? navSatMsg;
    private string? msg;
    private string? otherMsg;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Task.Run(async () => await ReloadTopics());
        RosInterop.OnStateHasChanged += (_) => InvokeAsync(StateHasChanged);
    }

    private async Task ReloadTopics()
    {
        //General Subscribe without type
        //await RosInterop.SubscribeTopic("/ctrlrFSM/speed_steering", "autosys_controller/SpeedAndSteering", OnTopic);
        await RosInterop.SubscribeTopic<SpeedSteerMsg>("/ctrlrFSM/speed_steering", "autosys_controller/SpeedAndSteering", OnSpeedSteeringTyped);
        await RosInterop.SubscribeTopic<NavSatFixMsg>("/ublox/fix", "sensor_msgs/NavSatFix", OnNavSat);
    }

    private void OnNavSat(NavSatFixMsg navSat)
    {
        navSatMsg = $"Seq {navSat.header?.seq}: Longitude: {navSat.longitude}, Latitude: {navSat.latitude}. Altitude: {navSat.altitude}";
        InvokeAsync(StateHasChanged);
    }

    private void OnSpeedSteeringTyped(SpeedSteerMsg speedSteer)
    {
        msg = $"Seq {speedSteer.header?.seq}: Speed: {speedSteer.speed:0.00}, Steering {speedSteer.steering_angle:0.00}";
        InvokeAsync(StateHasChanged);
    }

    public void OnTopic(string name, string msgType, string data)
    {
        otherMsg = $"{name} ({msgType}): {data}";
        InvokeAsync(StateHasChanged);
    }
    }